Description: Fix the use-after-free problem
Author: "Yukihiro \"Matz\" Matsumoto" <matz@ruby.or.jp>
Origin: upstream, https://github.com/mruby/mruby/commit/9cdf439db52b66447b4e37c61179d54fad6c8f33
  https://github.com/mruby/mruby/commit/97319697c8f9f6ff27b32589947e1918e3015503
Bug-Debian: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=990540
Last-Update: 2021-07-12

From 9cdf439db52b66447b4e37c61179d54fad6c8f33 Mon Sep 17 00:00:00 2001
From: "Yukihiro \"Matz\" Matsumoto" <matz@ruby.or.jp>
Date: Tue, 23 Jun 2020 13:19:10 +0900
Subject: [PATCH] Free the original pointer if `realloc` failed.

The POSIX `realloc` keep the original pointer untouched, so it can
easily leads to memory leakage. `mrb_realloc()` should handle those
bookkeeping, while `mrb_realloc_simple()` keeps the original `realloc`
behavior.
---
 src/gc.c | 11 +++--------
 1 file changed, 3 insertions(+), 8 deletions(-)

diff --git a/src/gc.c b/src/gc.c
index 03c561d35..6c83911d5 100644
--- a/src/gc.c
+++ b/src/gc.c
@@ -225,14 +225,9 @@ mrb_realloc(mrb_state *mrb, void *p, size_t len)
   p2 = mrb_realloc_simple(mrb, p, len);
   if (len == 0) return p2;
   if (p2 == NULL) {
-    if (mrb->gc.out_of_memory) {
-      mrb_raise_nomemory(mrb);
-      /* mrb_panic(mrb); */
-    }
-    else {
-      mrb->gc.out_of_memory = TRUE;
-      mrb_raise_nomemory(mrb);
-    }
+    mrb_free(mrb, p);
+    mrb->gc.out_of_memory = TRUE;
+    mrb_raise_nomemory(mrb);
   }
   else {
     mrb->gc.out_of_memory = FALSE;
-- 
2.32.0

From 97319697c8f9f6ff27b32589947e1918e3015503 Mon Sep 17 00:00:00 2001
From: "Yukihiro \"Matz\" Matsumoto" <matz@ruby.or.jp>
Date: Thu, 2 Jul 2020 10:41:03 +0900
Subject: [PATCH] Cancel 9cdf439

Should not free the pointer in `realloc` since it can cause
use-after-free problem.
---
 src/gc.c | 1 -
 1 file changed, 1 deletion(-)

diff --git a/src/gc.c b/src/gc.c
index 6c83911d5..e1892080f 100644
--- a/src/gc.c
+++ b/src/gc.c
@@ -225,7 +225,6 @@ mrb_realloc(mrb_state *mrb, void *p, size_t len)
   p2 = mrb_realloc_simple(mrb, p, len);
   if (len == 0) return p2;
   if (p2 == NULL) {
-    mrb_free(mrb, p);
     mrb->gc.out_of_memory = TRUE;
     mrb_raise_nomemory(mrb);
   }
-- 
2.32.0

